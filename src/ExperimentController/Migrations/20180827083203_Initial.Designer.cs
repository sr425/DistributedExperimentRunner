// <auto-generated />
using System;
using ExperimentController;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExperimentController.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180827083203_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("ExperimentController.Model.ClientResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ErrorMessage");

                    b.Property<bool>("Failed");

                    b.Property<long>("TaskId");

                    b.Property<string>("ValuesSerializationString")
                        .HasColumnName("ValuesSerializationString");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("ExperimentController.Model.Dataset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FileSerializationString")
                        .HasColumnName("FileSerializationString");

                    b.Property<string>("Name");

                    b.Property<string>("Prefix");

                    b.HasKey("Id");

                    b.ToTable("Datasets");

                    b.HasData(
                        new { Id = 1L, Description = "Middlebury Optical flow benchark with 8 sequences", FileSerializationString = "[{\"frame10\":\"RubberWhale/frame10.png\",\"frame11\":\"RubberWhale/frame11.png\",\"groundtruth\":\"RubberWhale/flow10.flo\"},{\"frame10\":\"Hydrangea/frame10.png\",\"frame11\":\"Hydrangea/frame11.png\",\"groundtruth\":\"Hydrangea/flow10.flo\"},{\"frame10\":\"Grove2/frame10.png\",\"frame11\":\"Grove2/frame11.png\",\"groundtruth\":\"Grove2/flow10.flo\"},{\"frame10\":\"Grove3/frame10.png\",\"frame11\":\"Grove3/frame11.png\",\"groundtruth\":\"Grove3/flow10.flo\"},{\"frame10\":\"Urban2/frame10.png\",\"frame11\":\"Urban2/frame11.png\",\"groundtruth\":\"Urban2/flow10.flo\"},{\"frame10\":\"Urban3/frame10.png\",\"frame11\":\"Urban3/frame11.png\",\"groundtruth\":\"Urban3/flow10.flo\"},{\"frame10\":\"Venus/frame10.png\",\"frame11\":\"Venus/frame11.png\",\"groundtruth\":\"Venus/flow10.flo\"},{\"frame10\":\"Dimetrodon/frame10.png\",\"frame11\":\"Dimetrodon/frame11.png\",\"groundtruth\":\"Dimetrodon/flow10.flo\"}]", Name = "Middlebury Flow 8", Prefix = "middlebury/training/" }
                    );
                });

            modelBuilder.Entity("ExperimentController.Model.ExecutionPayload", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("BinaryExecutionData");

                    b.Property<string>("Filename");

                    b.HasKey("Id");

                    b.ToTable("Payload");
                });

            modelBuilder.Entity("ExperimentController.Model.Experiment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Creator");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("PayloadFilename");

                    b.Property<string>("PayloadHash");

                    b.Property<string>("SharedFixedParameterSerializationString")
                        .HasColumnName("SharedFixedParameterSerializationString");

                    b.HasKey("Id");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("ExperimentController.Model.ExperimentFolderHierarchy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SubFoldersSerialized");

                    b.HasKey("Id");

                    b.ToTable("ExperimentFolderHierarchies");
                });

            modelBuilder.Entity("ExperimentController.Model.ExperimentPart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AggregatedValuesSerializationString")
                        .HasColumnName("AggregatedValuesSerializationString");

                    b.Property<string>("DynamicParametersSerializationString")
                        .HasColumnName("DynamicParametersSerializationString");

                    b.Property<long>("ExperimentId");

                    b.Property<bool>("Failed");

                    b.Property<bool>("Finished");

                    b.Property<string>("FixedParametersSerializationString")
                        .HasColumnName("FixedParametersSerializationString");

                    b.Property<string>("Name");

                    b.Property<bool>("Running");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.ToTable("ExperimentParts");
                });

            modelBuilder.Entity("ExperimentController.Model.ExperimentPart_Dataset_Relation", b =>
                {
                    b.Property<long>("DatasetId");

                    b.Property<long>("ExperimentPartId");

                    b.HasKey("DatasetId", "ExperimentPartId");

                    b.HasIndex("ExperimentPartId");

                    b.ToTable("ExperimentPartDatasetRelations");
                });

            modelBuilder.Entity("ExperimentController.Model.InstanceTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Failed");

                    b.Property<bool>("Finished");

                    b.Property<string>("InputDataSerializationString")
                        .HasColumnName("InputDataSerializationString");

                    b.Property<string>("InputPrefix");

                    b.Property<string>("Name");

                    b.Property<bool>("Running");

                    b.Property<long?>("SetId");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ExperimentController.Model.TaskSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AggregatedValuesSerializationString")
                        .HasColumnName("AggregatedValuesSerializationString");

                    b.Property<long>("ExecutionRound");

                    b.Property<long>("ExperimentPartId");

                    b.Property<bool>("Failed");

                    b.Property<bool>("Finished");

                    b.Property<long?>("InputDatasetId");

                    b.Property<string>("Name");

                    b.Property<string>("ParameterSerializationString")
                        .HasColumnName("ParameterSerializationString");

                    b.Property<bool>("Running");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentPartId");

                    b.HasIndex("InputDatasetId");

                    b.ToTable("TaskSets");
                });

            modelBuilder.Entity("ExperimentController.Model.ClientResult", b =>
                {
                    b.HasOne("ExperimentController.Model.InstanceTask", "Task")
                        .WithMany("Results")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExperimentController.Model.ExperimentPart", b =>
                {
                    b.HasOne("ExperimentController.Model.Experiment", "Experiment")
                        .WithMany("Parts")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExperimentController.Model.ExperimentPart_Dataset_Relation", b =>
                {
                    b.HasOne("ExperimentController.Model.Dataset", "Dataset")
                        .WithMany("ExperimentPartRelations")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExperimentController.Model.ExperimentPart", "ExperimentPart")
                        .WithMany("InputDatasetRelations")
                        .HasForeignKey("ExperimentPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExperimentController.Model.InstanceTask", b =>
                {
                    b.HasOne("ExperimentController.Model.TaskSet", "Set")
                        .WithMany("Tasks")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExperimentController.Model.TaskSet", b =>
                {
                    b.HasOne("ExperimentController.Model.ExperimentPart", "ExperimentPart")
                        .WithMany("TaskSets")
                        .HasForeignKey("ExperimentPartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExperimentController.Model.Dataset", "InputDataset")
                        .WithMany()
                        .HasForeignKey("InputDatasetId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
